type token =
  | BOOL
  | BREAK
  | BYREF
  | CONTINUE
  | DELETE
  | DOUBLE
  | ELSE
  | FOR
  | FALSE
  | IF
  | INT
  | NEW
  | INT_NUM of (int)
  | DOUBLE_NUM of (float)
  | NULL
  | RETURN
  | TRUE
  | VOID
  | IDENT of (string)
  | CHAR_V of (string)
  | CHAR
  | STRING of (string)
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | GREATER
  | LESS
  | MOD
  | AMPERSAND
  | NOT
  | Q_MARK
  | COLON
  | COMMA
  | EQUAL
  | N_EQUAL
  | GREAT_EQ
  | LESS_EQ
  | AND
  | OR
  | PPLUS
  | MMINUS
  | ASSIGN_ADD
  | ASSIGN_MINUS
  | ASSIGN_TIMES
  | ASSIGN_DIV
  | ASSIGN_MOD
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCBRACK
  | RCBRACK
  | INCLUDE
  | EOF
  | VAR of (string)
  | FNCT of (float->float)

open Parsing;;
let _ = parse_error;;
# 2 "Parser.mly"
open Printf
open Types
open Ast
open Identifier
(*open Semantic*)
open Error
(*open Parsing*)
(*open Output*)
(*open QuadTypes
open Quads*)
open Lexing
# 77 "Parser.ml"
let yytransl_const = [|
  257 (* BOOL *);
  258 (* BREAK *);
  259 (* BYREF *);
  260 (* CONTINUE *);
  261 (* DELETE *);
  262 (* DOUBLE *);
  263 (* ELSE *);
  264 (* FOR *);
  265 (* FALSE *);
  266 (* IF *);
  267 (* INT *);
  268 (* NEW *);
  271 (* NULL *);
  272 (* RETURN *);
  273 (* TRUE *);
  274 (* VOID *);
  277 (* CHAR *);
  279 (* ASSIGN *);
  280 (* PLUS *);
  281 (* MINUS *);
  282 (* TIMES *);
  283 (* DIV *);
  284 (* GREATER *);
  285 (* LESS *);
  286 (* MOD *);
  287 (* AMPERSAND *);
  288 (* NOT *);
  289 (* Q_MARK *);
  290 (* COLON *);
  291 (* COMMA *);
  292 (* EQUAL *);
  293 (* N_EQUAL *);
  294 (* GREAT_EQ *);
  295 (* LESS_EQ *);
  296 (* AND *);
  297 (* OR *);
  298 (* PPLUS *);
  299 (* MMINUS *);
  300 (* ASSIGN_ADD *);
  301 (* ASSIGN_MINUS *);
  302 (* ASSIGN_TIMES *);
  303 (* ASSIGN_DIV *);
  304 (* ASSIGN_MOD *);
  305 (* SEMICOLON *);
  306 (* LPAREN *);
  307 (* RPAREN *);
  308 (* LBRACK *);
  309 (* RBRACK *);
  310 (* LCBRACK *);
  311 (* RCBRACK *);
  312 (* INCLUDE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  269 (* INT_NUM *);
  270 (* DOUBLE_NUM *);
  275 (* IDENT *);
  276 (* CHAR_V *);
  278 (* STRING *);
  313 (* VAR *);
  314 (* FNCT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\006\000\006\000\
\006\000\007\000\010\000\010\000\012\000\012\000\013\000\013\000\
\013\000\013\000\011\000\011\000\008\000\008\000\014\000\014\000\
\015\000\017\000\017\000\016\000\016\000\009\000\009\000\005\000\
\005\000\019\000\019\000\022\000\022\000\021\000\021\000\020\000\
\020\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\026\000\026\000\
\024\000\024\000\025\000\025\000\027\000\028\000\028\000\028\000\
\028\000\028\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\029\000\029\000\031\000\031\000\031\000\031\000\031\000\031\000\
\000\000"

let yylen = "\002\000\
\003\000\000\000\002\000\002\000\001\000\002\000\001\000\001\000\
\001\000\003\000\001\000\003\000\001\000\002\000\001\000\001\000\
\001\000\001\000\001\000\004\000\006\000\006\000\000\000\001\000\
\002\000\000\000\003\000\003\000\002\000\009\000\009\000\000\000\
\002\000\000\000\002\000\000\000\001\000\000\000\002\000\000\000\
\001\000\001\000\002\000\003\000\005\000\007\000\010\000\003\000\
\003\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\004\000\002\000\002\000\004\000\003\000\
\002\000\004\000\003\000\002\000\003\000\005\000\000\000\001\000\
\000\000\003\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\105\000\000\000\017\000\016\000\015\000\000\000\
\018\000\000\000\003\000\000\000\005\000\007\000\008\000\009\000\
\000\000\013\000\000\000\004\000\001\000\006\000\000\000\014\000\
\000\000\011\000\000\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\024\000\000\000\000\000\000\000\054\000\000\000\
\056\000\058\000\055\000\053\000\000\000\057\000\059\000\080\000\
\081\000\079\000\078\000\082\000\097\000\098\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\029\000\000\000\
\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\000\086\000\087\000\083\000\084\000\089\000\088\000\085\000\
\000\000\096\000\092\000\093\000\091\000\090\000\094\000\095\000\
\103\000\104\000\100\000\101\000\102\000\000\000\068\000\000\000\
\000\000\020\000\000\000\000\000\028\000\022\000\032\000\000\000\
\021\000\032\000\000\000\064\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\060\000\000\000\000\000\066\000\033\000\000\000\
\000\000\074\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\034\000\031\000\035\000\000\000\000\000\030\000\
\041\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\043\000\049\000\048\000\000\000\050\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\047\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\118\000\127\000\014\000\015\000\
\016\000\025\000\026\000\017\000\018\000\034\000\035\000\036\000\
\066\000\141\000\128\000\146\000\142\000\149\000\143\000\108\000\
\110\000\111\000\057\000\058\000\059\000\096\000\097\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\001\255\000\000\000\000\000\000\017\255\
\000\000\072\255\000\000\001\000\000\000\000\000\000\000\000\000\
\047\255\000\000\041\255\000\000\000\000\000\000\220\254\000\000\
\245\254\000\000\014\255\014\255\224\000\087\255\000\000\039\255\
\069\255\058\255\000\000\075\255\066\255\224\000\000\000\039\255\
\000\000\000\000\000\000\000\000\071\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\192\000\192\002\
\070\255\224\000\224\000\074\255\000\000\073\255\000\000\009\255\
\014\255\000\000\054\255\052\255\238\254\224\000\233\254\042\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\224\000\000\000\224\000\
\224\000\000\000\052\255\052\255\000\000\000\000\000\000\075\255\
\000\000\000\000\224\000\000\000\192\002\089\255\076\255\224\000\
\000\000\072\002\151\001\196\255\196\255\038\255\000\000\038\255\
\182\001\224\000\000\000\032\255\224\000\000\000\000\000\240\255\
\038\000\000\000\222\002\251\002\103\255\103\255\078\255\224\000\
\243\254\000\000\000\000\000\000\000\000\117\255\102\002\000\000\
\000\000\080\255\085\255\224\000\097\255\192\002\000\000\092\000\
\099\255\000\000\000\000\000\000\132\002\000\000\000\000\224\000\
\146\000\102\255\148\255\224\000\146\000\107\255\000\000\224\000\
\106\255\146\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\255\000\000\
\000\000\000\000\110\255\110\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\252\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\105\255\
\000\000\000\000\000\000\013\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\001\058\001\112\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\001\120\001\000\000\000\000\000\000\111\255\
\000\000\000\000\000\000\000\000\113\255\114\255\000\000\000\000\
\000\000\000\000\000\000\240\001\011\002\128\255\000\000\128\255\
\000\000\000\000\000\000\213\001\000\000\000\000\000\000\158\255\
\158\255\000\000\252\254\067\255\118\255\118\255\000\000\119\255\
\162\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\255\000\000\158\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\119\255\
\158\255\000\000\182\255\119\255\158\255\000\000\000\000\121\255\
\000\000\158\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\063\000\049\000\000\000\000\000\
\000\000\000\000\143\000\234\255\000\000\147\000\000\000\109\000\
\072\000\137\255\149\255\045\000\000\000\177\255\227\255\000\000\
\000\000\000\000\000\000\000\000\211\255\000\000\000\000"

let yytablesize = 1071
let yytable = "\056\000\
\021\000\005\000\024\000\001\000\033\000\033\000\006\000\024\000\
\068\000\062\000\095\000\007\000\129\000\028\000\005\000\029\000\
\032\000\069\000\008\000\006\000\151\000\009\000\095\000\030\000\
\007\000\072\000\095\000\112\000\099\000\100\000\076\000\152\000\
\071\000\107\000\009\000\019\000\070\000\031\000\005\000\005\000\
\109\000\163\000\033\000\006\000\006\000\167\000\076\000\019\000\
\007\000\007\000\171\000\114\000\013\000\095\000\095\000\008\000\
\010\000\102\000\009\000\009\000\022\000\019\000\103\000\095\000\
\115\000\023\000\116\000\117\000\095\000\095\000\095\000\095\000\
\024\000\053\000\054\000\095\000\090\000\121\000\095\000\037\000\
\162\000\037\000\124\000\094\000\166\000\095\000\095\000\063\000\
\169\000\070\000\027\000\101\000\131\000\020\000\024\000\132\000\
\090\000\095\000\024\000\070\000\070\000\070\000\105\000\094\000\
\095\000\060\000\150\000\106\000\064\000\065\000\070\000\095\000\
\070\000\070\000\070\000\070\000\067\000\070\000\157\000\070\000\
\070\000\145\000\098\000\122\000\153\000\029\000\123\000\148\000\
\155\000\034\000\150\000\034\000\034\000\156\000\150\000\034\000\
\034\000\034\000\150\000\034\000\034\000\034\000\034\000\034\000\
\034\000\158\000\034\000\034\000\160\000\034\000\164\000\034\000\
\034\000\034\000\165\000\168\000\170\000\077\000\034\000\034\000\
\023\000\026\000\071\000\075\000\072\000\038\000\040\000\036\000\
\120\000\034\000\034\000\036\000\061\000\104\000\037\000\119\000\
\034\000\034\000\147\000\000\000\000\000\034\000\034\000\045\000\
\000\000\045\000\045\000\000\000\000\000\045\000\045\000\045\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\
\045\000\045\000\000\000\045\000\000\000\045\000\045\000\045\000\
\000\000\000\000\000\000\000\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\074\000\075\000\076\000\077\000\045\000\
\045\000\080\000\000\000\000\000\000\000\000\000\045\000\045\000\
\000\000\000\000\000\000\045\000\045\000\053\000\054\000\000\000\
\090\000\133\000\000\000\134\000\038\000\000\000\000\000\094\000\
\039\000\135\000\000\000\040\000\041\000\042\000\043\000\136\000\
\044\000\005\000\137\000\046\000\000\000\047\000\006\000\048\000\
\049\000\050\000\000\000\007\000\000\000\000\000\051\000\052\000\
\000\000\000\000\008\000\000\000\000\000\009\000\000\000\000\000\
\000\000\053\000\054\000\000\000\000\000\000\000\000\000\000\000\
\138\000\055\000\000\000\000\000\000\000\139\000\140\000\133\000\
\000\000\134\000\038\000\000\000\000\000\000\000\039\000\135\000\
\000\000\040\000\041\000\042\000\043\000\136\000\044\000\000\000\
\137\000\046\000\000\000\047\000\000\000\048\000\049\000\050\000\
\000\000\000\000\000\000\000\000\051\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\054\000\000\000\000\000\000\000\000\000\000\000\138\000\055\000\
\000\000\000\000\000\000\139\000\144\000\133\000\000\000\134\000\
\038\000\000\000\000\000\000\000\039\000\135\000\000\000\040\000\
\041\000\042\000\043\000\136\000\044\000\000\000\137\000\046\000\
\000\000\047\000\000\000\048\000\049\000\050\000\000\000\000\000\
\000\000\000\000\051\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\054\000\000\000\
\000\000\000\000\000\000\000\000\138\000\055\000\000\000\000\000\
\000\000\139\000\159\000\133\000\000\000\134\000\038\000\000\000\
\000\000\000\000\039\000\135\000\000\000\040\000\041\000\042\000\
\043\000\136\000\044\000\000\000\137\000\046\000\000\000\047\000\
\000\000\048\000\049\000\050\000\000\000\000\000\000\000\000\000\
\051\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\054\000\000\000\000\000\000\000\
\005\000\000\000\138\000\055\000\038\000\006\000\000\000\139\000\
\039\000\000\000\007\000\040\000\041\000\042\000\043\000\000\000\
\044\000\000\000\045\000\046\000\009\000\047\000\000\000\048\000\
\049\000\050\000\000\000\000\000\000\000\000\000\051\000\052\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\039\000\053\000\054\000\040\000\041\000\042\000\043\000\000\000\
\044\000\055\000\045\000\046\000\000\000\047\000\000\000\048\000\
\049\000\050\000\000\000\000\000\000\000\000\000\051\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\051\000\051\000\
\051\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
\065\000\065\000\065\000\065\000\000\000\065\000\000\000\065\000\
\073\000\073\000\073\000\000\000\073\000\073\000\073\000\073\000\
\000\000\000\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\000\000\073\000\000\000\073\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\061\000\061\000\
\061\000\061\000\000\000\061\000\000\000\061\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\000\000\062\000\062\000\062\000\
\062\000\000\000\062\000\000\000\062\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\081\000\
\000\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\053\000\054\000\089\000\090\000\091\000\092\000\093\000\000\000\
\000\000\000\000\094\000\126\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\081\000\000\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\053\000\
\054\000\089\000\090\000\091\000\092\000\093\000\000\000\000\000\
\000\000\094\000\130\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\
\063\000\000\000\063\000\063\000\063\000\063\000\067\000\063\000\
\000\000\063\000\000\000\067\000\067\000\000\000\000\000\000\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\067\000\000\000\067\000\067\000\067\000\
\067\000\069\000\067\000\000\000\067\000\000\000\069\000\069\000\
\000\000\000\000\000\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\000\000\000\000\069\000\000\000\
\069\000\069\000\069\000\069\000\000\000\069\000\000\000\069\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\081\000\000\000\082\000\083\000\084\000\085\000\
\086\000\087\000\088\000\053\000\054\000\089\000\090\000\091\000\
\092\000\093\000\000\000\000\000\113\000\094\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\081\000\125\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\053\000\054\000\089\000\090\000\091\000\092\000\093\000\
\000\000\000\000\000\000\094\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\081\000\000\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\053\000\
\054\000\089\000\090\000\091\000\092\000\093\000\154\000\000\000\
\000\000\094\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\081\000\000\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\053\000\054\000\089\000\
\090\000\091\000\092\000\093\000\000\000\000\000\161\000\094\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\000\000\051\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\000\000\000\000\051\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\081\000\000\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\053\000\054\000\089\000\090\000\091\000\092\000\093\000\
\000\000\000\000\000\000\094\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\081\000\000\000\
\000\000\083\000\084\000\085\000\086\000\087\000\088\000\053\000\
\054\000\089\000\090\000\091\000\092\000\093\000\000\000\000\000\
\000\000\094\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\000\000\000\000\000\000\083\000\084\000\
\085\000\086\000\087\000\088\000\053\000\054\000\000\000\090\000\
\000\000\000\000\000\000\000\000\000\000\000\000\094\000"

let yycheck = "\029\000\
\000\000\001\001\026\001\001\000\027\000\028\000\006\001\026\001\
\038\000\032\000\056\000\011\001\120\000\050\001\001\001\052\001\
\003\001\040\000\018\001\006\001\034\001\021\001\068\000\035\001\
\011\001\055\000\072\000\051\001\058\000\059\000\035\001\139\000\
\055\000\052\001\021\001\019\001\050\001\049\001\001\001\001\001\
\070\000\161\000\065\000\006\001\006\001\165\000\051\001\035\001\
\011\001\011\001\170\000\081\000\004\000\099\000\100\000\018\001\
\056\001\049\001\021\001\021\001\012\000\049\001\054\001\109\000\
\094\000\019\001\096\000\097\000\114\000\115\000\116\000\117\000\
\026\001\042\001\043\001\121\000\045\001\107\000\124\000\049\001\
\160\000\051\001\112\000\052\001\164\000\131\000\132\000\019\001\
\168\000\023\001\050\001\019\001\122\000\022\001\026\001\125\000\
\045\001\143\000\026\001\033\001\034\001\035\001\049\001\052\001\
\150\000\019\001\136\000\054\001\051\001\035\001\044\001\157\000\
\046\001\047\001\048\001\049\001\051\001\051\001\148\000\053\001\
\050\001\019\001\053\001\035\001\008\001\052\001\051\001\050\001\
\049\001\002\001\160\000\004\001\005\001\049\001\164\000\008\001\
\009\001\010\001\168\000\012\001\013\001\014\001\015\001\016\001\
\017\001\049\001\019\001\020\001\050\001\022\001\049\001\024\001\
\025\001\026\001\007\001\049\001\051\001\053\001\031\001\032\001\
\051\001\051\001\051\001\051\001\051\001\008\001\049\001\049\001\
\106\000\042\001\043\001\051\001\030\000\065\000\028\000\104\000\
\049\001\050\001\134\000\255\255\255\255\054\001\055\001\002\001\
\255\255\004\001\005\001\255\255\255\255\008\001\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\026\001\027\001\042\001\
\043\001\030\001\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\255\255\255\255\054\001\055\001\042\001\043\001\255\255\
\045\001\002\001\255\255\004\001\005\001\255\255\255\255\052\001\
\009\001\010\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\001\001\019\001\020\001\255\255\022\001\006\001\024\001\
\025\001\026\001\255\255\011\001\255\255\255\255\031\001\032\001\
\255\255\255\255\018\001\255\255\255\255\021\001\255\255\255\255\
\255\255\042\001\043\001\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\255\255\255\255\255\255\054\001\055\001\002\001\
\255\255\004\001\005\001\255\255\255\255\255\255\009\001\010\001\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\022\001\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\255\255\255\255\054\001\055\001\002\001\255\255\004\001\
\005\001\255\255\255\255\255\255\009\001\010\001\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\255\255\022\001\255\255\024\001\025\001\026\001\255\255\255\255\
\255\255\255\255\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\255\255\
\255\255\255\255\255\255\255\255\049\001\050\001\255\255\255\255\
\255\255\054\001\055\001\002\001\255\255\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\043\001\255\255\255\255\255\255\
\001\001\255\255\049\001\050\001\005\001\006\001\255\255\054\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\255\255\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\255\255\005\001\255\255\255\255\255\255\
\009\001\042\001\043\001\012\001\013\001\014\001\015\001\255\255\
\017\001\050\001\019\001\020\001\255\255\022\001\255\255\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\051\001\052\001\
\053\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\046\001\047\001\048\001\049\001\255\255\051\001\255\255\053\001\
\023\001\024\001\025\001\255\255\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\051\001\255\255\053\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\049\001\255\255\051\001\255\255\053\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\255\255\046\001\047\001\048\001\
\049\001\255\255\051\001\255\255\053\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\255\255\052\001\053\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\255\255\052\001\053\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\255\255\
\044\001\255\255\046\001\047\001\048\001\049\001\023\001\051\001\
\255\255\053\001\255\255\028\001\029\001\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\255\255\044\001\255\255\046\001\047\001\048\001\
\049\001\023\001\051\001\255\255\053\001\255\255\028\001\029\001\
\255\255\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\255\255\255\255\044\001\255\255\
\046\001\047\001\048\001\049\001\255\255\051\001\255\255\053\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\255\255\255\255\051\001\052\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\255\255\052\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\255\255\052\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\255\255\255\255\051\001\052\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\255\255\052\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\033\001\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\255\255\052\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\255\255\052\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001"

let yynames_const = "\
  BOOL\000\
  BREAK\000\
  BYREF\000\
  CONTINUE\000\
  DELETE\000\
  DOUBLE\000\
  ELSE\000\
  FOR\000\
  FALSE\000\
  IF\000\
  INT\000\
  NEW\000\
  NULL\000\
  RETURN\000\
  TRUE\000\
  VOID\000\
  CHAR\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  GREATER\000\
  LESS\000\
  MOD\000\
  AMPERSAND\000\
  NOT\000\
  Q_MARK\000\
  COLON\000\
  COMMA\000\
  EQUAL\000\
  N_EQUAL\000\
  GREAT_EQ\000\
  LESS_EQ\000\
  AND\000\
  OR\000\
  PPLUS\000\
  MMINUS\000\
  ASSIGN_ADD\000\
  ASSIGN_MINUS\000\
  ASSIGN_TIMES\000\
  ASSIGN_DIV\000\
  ASSIGN_MOD\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LCBRACK\000\
  RCBRACK\000\
  INCLUDE\000\
  EOF\000\
  "

let yynames_block = "\
  INT_NUM\000\
  DOUBLE_NUM\000\
  IDENT\000\
  CHAR_V\000\
  STRING\000\
  VAR\000\
  FNCT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_declaration list) in
    Obj.repr(
# 152 "Parser.mly"
                            ( ast_tree := Some _2 )
# 605 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "Parser.mly"
                      ( () )
# 611 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 159 "Parser.mly"
                  ( () )
# 619 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 162 "Parser.mly"
                       ( () )
# 626 "Parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_declaration) in
    Obj.repr(
# 165 "Parser.mly"
                      ( [_1])
# 633 "Parser.ml"
               : ast_declaration list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_declaration list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_declaration) in
    Obj.repr(
# 166 "Parser.mly"
                      ( _1 @ [_2] )
# 641 "Parser.ml"
               : ast_declaration list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_declaration) in
    Obj.repr(
# 169 "Parser.mly"
                              ( _1 )
# 648 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_declaration) in
    Obj.repr(
# 170 "Parser.mly"
                   ( _1 )
# 655 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_declaration) in
    Obj.repr(
# 171 "Parser.mly"
                  ( _1 )
# 662 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_declarator list) in
    Obj.repr(
# 174 "Parser.mly"
                                              ( Vardecl (_1, _2) )
# 670 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_declarator) in
    Obj.repr(
# 177 "Parser.mly"
                        ( [_1] )
# 677 "Parser.ml"
               : ast_declarator list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_declarator list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_declarator) in
    Obj.repr(
# 178 "Parser.mly"
                               ( _1 @ [_3] )
# 685 "Parser.ml"
               : ast_declarator list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_type) in
    Obj.repr(
# 181 "Parser.mly"
               ( _1 )
# 692 "Parser.ml"
               : ast_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_type) in
    Obj.repr(
# 182 "Parser.mly"
                            ( Tptr _1 )
# 699 "Parser.ml"
               : ast_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "Parser.mly"
             ( Tint )
# 705 "Parser.ml"
               : ast_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "Parser.mly"
         ( Tdouble )
# 711 "Parser.ml"
               : ast_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "Parser.mly"
       ( Tbool )
# 717 "Parser.ml"
               : ast_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "Parser.mly"
       ( Tchar )
# 723 "Parser.ml"
               : ast_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 195 "Parser.mly"
                  ( Decl (_1, None) )
# 730 "Parser.ml"
               : ast_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 196 "Parser.mly"
                                   ( Decl (_1, Some _3) )
# 738 "Parser.ml"
               : ast_declarator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : ast_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : ast_param list) in
    Obj.repr(
# 199 "Parser.mly"
                                                                         ( Fundecl ((Ttype _1), _2, _4) )
# 747 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : ast_param list) in
    Obj.repr(
# 200 "Parser.mly"
                                                       ( Fundecl (Tvoid, _2, _4) )
# 755 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "Parser.mly"
                               ( [] )
# 761 "Parser.ml"
               : ast_param list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_param list) in
    Obj.repr(
# 204 "Parser.mly"
                 ( _1 )
# 768 "Parser.ml"
               : ast_param list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_param) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_param list) in
    Obj.repr(
# 208 "Parser.mly"
                      ( _1 :: _2 )
# 776 "Parser.ml"
               : ast_param list))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "Parser.mly"
           ( [] )
# 782 "Parser.ml"
               : ast_param list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_param list) in
    Obj.repr(
# 213 "Parser.mly"
                              ( _2 :: _3 )
# 790 "Parser.ml"
               : ast_param list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 217 "Parser.mly"
                   ( ParamByRef (_2, _3) )
# 798 "Parser.ml"
               : ast_param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 218 "Parser.mly"
               ( Param (_1, _2) )
# 806 "Parser.ml"
               : ast_param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : ast_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : ast_param list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : ast_declaration list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 226 "Parser.mly"
                                                                                                     ( Fundefi ((Ttype _1), _2, _4, _7, _8) )
# 817 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : ast_param list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : ast_declaration list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 227 "Parser.mly"
                                                                                     ( Fundefi (Tvoid, _2, _4, _7, _8) )
# 827 "Parser.ml"
               : ast_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 230 "Parser.mly"
                          ( [] )
# 833 "Parser.ml"
               : ast_declaration list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_declaration list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_declaration) in
    Obj.repr(
# 231 "Parser.mly"
                          ( _1 @ [_2] )
# 841 "Parser.ml"
               : ast_declaration list))
; (fun __caml_parser_env ->
    Obj.repr(
# 234 "Parser.mly"
                        ( [] )
# 847 "Parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt) in
    Obj.repr(
# 235 "Parser.mly"
                      ( _1 @ [_2] )
# 855 "Parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    Obj.repr(
# 241 "Parser.mly"
             ( None )
# 861 "Parser.ml"
               : ast_expr option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 242 "Parser.mly"
              ( Some _1 )
# 868 "Parser.ml"
               : ast_expr option))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "Parser.mly"
             ( "" )
# 874 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 246 "Parser.mly"
               ( _1 )
# 881 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "Parser.mly"
             ( "" )
# 887 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 250 "Parser.mly"
          ( _1 )
# 894 "Parser.ml"
               : string))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "Parser.mly"
                      ( Snull )
# 900 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 254 "Parser.mly"
                              ( Sexpr _1)
# 907 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 255 "Parser.mly"
                                    ( Slist _2 )
# 914 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt) in
    Obj.repr(
# 256 "Parser.mly"
                                                                     ( Sif (_3, _5, None) )
# 922 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : ast_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : ast_stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt) in
    Obj.repr(
# 257 "Parser.mly"
                                                              ( Sif (_3, _5, Some _7) )
# 931 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : ast_expr option) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : ast_expr option) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : ast_expr option) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt) in
    Obj.repr(
# 258 "Parser.mly"
                                                                                               ( Sfor (_1, _4, _6, _8,_10) )
# 942 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 259 "Parser.mly"
                                      ( Scont _2 )
# 949 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 260 "Parser.mly"
                                  ( Sbrk _2 )
# 956 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_expr option) in
    Obj.repr(
# 261 "Parser.mly"
                                 ( Sreturn _2)
# 963 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 264 "Parser.mly"
                   ( Eid _1 )
# 970 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 265 "Parser.mly"
                           ( _2 )
# 977 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 266 "Parser.mly"
       ( Ebool true )
# 983 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "Parser.mly"
        ( Ebool false )
# 989 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "Parser.mly"
       ( Enull )
# 995 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 269 "Parser.mly"
          ( Eint _1 )
# 1002 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 270 "Parser.mly"
         ( Echar _1 )
# 1009 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 271 "Parser.mly"
             ( Edoub _1 )
# 1016 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 272 "Parser.mly"
         ( Estr _1 )
# 1023 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr list) in
    Obj.repr(
# 273 "Parser.mly"
                                  ( Eapp (_1, _3) )
# 1031 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_unop) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 274 "Parser.mly"
                                 ( Eunop (_2, _1) )
# 1039 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_unas) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 275 "Parser.mly"
                                           ( Eunas (_2, _1) )
# 1047 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : ast_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 276 "Parser.mly"
                                                ( Ecast (_2, _4) )
# 1055 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 277 "Parser.mly"
                         ( Enew (_2, _3) )
# 1063 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 278 "Parser.mly"
                    ( Edel _2 )
# 1070 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : ast_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 280 "Parser.mly"
                                                    ( Emat(_1, _3) )
# 1078 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_bop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 281 "Parser.mly"
                                                 ( Ebop (_1, _3, _2) )
# 1087 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_unas) in
    Obj.repr(
# 282 "Parser.mly"
                                            ( Eunas1 (_1, _2) )
# 1095 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_bas) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 283 "Parser.mly"
                                                           ( Ebas (_1, _3, _2) )
# 1104 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : ast_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 284 "Parser.mly"
                                                             ( Eif (_1, _3, _5) )
# 1113 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 288 "Parser.mly"
                          ( [] )
# 1119 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_expr list) in
    Obj.repr(
# 289 "Parser.mly"
                  ( _1 )
# 1126 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "Parser.mly"
                          ( Eint 1 )
# 1132 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 293 "Parser.mly"
                           ( _2 )
# 1139 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 296 "Parser.mly"
                                        ( [_1] )
# 1146 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 297 "Parser.mly"
                                   ( _1 @ [_3] )
# 1154 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 300 "Parser.mly"
                          ( _1 )
# 1161 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "Parser.mly"
                ( Tuamp )
# 1167 "Parser.ml"
               : ast_unop))
; (fun __caml_parser_env ->
    Obj.repr(
# 305 "Parser.mly"
              ( Tutim )
# 1173 "Parser.ml"
               : ast_unop))
; (fun __caml_parser_env ->
    Obj.repr(
# 306 "Parser.mly"
             ( Tupl )
# 1179 "Parser.ml"
               : ast_unop))
; (fun __caml_parser_env ->
    Obj.repr(
# 307 "Parser.mly"
              ( Tumin )
# 1185 "Parser.ml"
               : ast_unop))
; (fun __caml_parser_env ->
    Obj.repr(
# 308 "Parser.mly"
            ( Tunot )
# 1191 "Parser.ml"
               : ast_unop))
; (fun __caml_parser_env ->
    Obj.repr(
# 313 "Parser.mly"
      ( Tbtim )
# 1197 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 314 "Parser.mly"
      ( Tbdiv )
# 1203 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 315 "Parser.mly"
      ( Tbmod )
# 1209 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 316 "Parser.mly"
       ( Tbpl )
# 1215 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 317 "Parser.mly"
        ( Tbmin )
# 1221 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 318 "Parser.mly"
       ( Tblss )
# 1227 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 319 "Parser.mly"
          ( Tbgrt )
# 1233 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "Parser.mly"
          ( Tbleq )
# 1239 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 321 "Parser.mly"
           ( Tbgeq )
# 1245 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 322 "Parser.mly"
        ( Tbeq )
# 1251 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 323 "Parser.mly"
          ( Tbneq )
# 1257 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 324 "Parser.mly"
      ( Tband )
# 1263 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 325 "Parser.mly"
     ( Tbor )
# 1269 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 326 "Parser.mly"
        ( Tbcom )
# 1275 "Parser.ml"
               : ast_bop))
; (fun __caml_parser_env ->
    Obj.repr(
# 332 "Parser.mly"
        ( Tppl )
# 1281 "Parser.ml"
               : ast_unas))
; (fun __caml_parser_env ->
    Obj.repr(
# 333 "Parser.mly"
           ( Tmmin )
# 1287 "Parser.ml"
               : ast_unas))
; (fun __caml_parser_env ->
    Obj.repr(
# 338 "Parser.mly"
         ( Tba )
# 1293 "Parser.ml"
               : ast_bas))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "Parser.mly"
                 ( Tbatim )
# 1299 "Parser.ml"
               : ast_bas))
; (fun __caml_parser_env ->
    Obj.repr(
# 340 "Parser.mly"
               ( Tbadiv )
# 1305 "Parser.ml"
               : ast_bas))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "Parser.mly"
               ( Tbamod )
# 1311 "Parser.ml"
               : ast_bas))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "Parser.mly"
               ( Tbapl )
# 1317 "Parser.ml"
               : ast_bas))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "Parser.mly"
                 ( Tbamin )
# 1323 "Parser.ml"
               : ast_bas))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
